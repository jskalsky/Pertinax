using System;
using System.Windows;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace WpfControlLibrary.Model
{
  internal static class DefaultDataModel
  {
    internal static void Setup(ModNodeNs ns0)
    {
      ModNode parent = ns0;
      Stack<ModNode> stack = new Stack<ModNode>();
      ModNode node = null;
      node = new ModNodeFolder("Objects", new ModNodeIdNumeric(0,85));
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeObject("Server", new ModNodeIdNumeric(0,2253), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeVariable("Auditing", new ModNodeIdNumeric(0, 2994), basic_type.Boolean, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("ServiceLevel", new ModNodeIdNumeric(0, 2267), basic_type.UInt8, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeObject("ServerRedundancy", new ModNodeIdNumeric(0,2296), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeVariable("RedundancySupport", new ModNodeIdNumeric(0, 3709), basic_type.Int32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      node = new ModNodeObject("VendorServerInfo", new ModNodeIdNumeric(0,2295), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeObject("ServerDiagnostics", new ModNodeIdNumeric(0,2274), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeVariable("EnabledFlag", new ModNodeIdNumeric(0, 2294), basic_type.Boolean, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      node = new ModNodeObject("ServerCapabilities", new ModNodeIdNumeric(0,2268), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("MaxHistoryContinuationPoints", new ModNodeIdNumeric(0, 2737), basic_type.UInt16, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("MaxQueryContinuationPoints", new ModNodeIdNumeric(0, 2736), basic_type.UInt16, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("MaxBrowseContinuationPoints", new ModNodeIdNumeric(0, 2735), basic_type.UInt16, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("MinSupportedSampleRate", new ModNodeIdNumeric(0, 2272), basic_type.Double, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeFolder("AggregateFunctions", new ModNodeIdNumeric(0,2997));
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeFolder("ModellingRules", new ModNodeIdNumeric(0,2996));
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeObject("ExposesItsArray", new ModNodeIdNumeric(0,83), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeVariable("NamingRule", new ModNodeIdNumeric(0, 114), basic_type.Int32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      node = new ModNodeObject("Mandatory", new ModNodeIdNumeric(0,78), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeVariable("NamingRule", new ModNodeIdNumeric(0, 112), basic_type.Int32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      node = new ModNodeObject("MandatoryPlaceholder", new ModNodeIdNumeric(0,11510), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeVariable("NamingRule", new ModNodeIdNumeric(0, 11511), basic_type.Int32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      node = new ModNodeObject("Optional", new ModNodeIdNumeric(0,80), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeVariable("NamingRule", new ModNodeIdNumeric(0, 113), basic_type.Int32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      node = new ModNodeObject("OptionalPlaceholder", new ModNodeIdNumeric(0,11508), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeVariable("NamingRule", new ModNodeIdNumeric(0, 11509), basic_type.Int32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      parent = stack.Pop();
      node = new ModNodeObject("OperationLimits", new ModNodeIdNumeric(0,11704), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeVariable("MaxMonitoredItemsPerCall", new ModNodeIdNumeric(0, 11714), basic_type.UInt32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("MaxNodesPerNodeManagement", new ModNodeIdNumeric(0, 11713), basic_type.UInt32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("MaxNodesPerTranslateBrowsePathsToNodeIds", new ModNodeIdNumeric(0, 11712), basic_type.UInt32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("MaxNodesPerRegisterNodes", new ModNodeIdNumeric(0, 11711), basic_type.UInt32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("MaxNodesPerBrowse", new ModNodeIdNumeric(0, 11710), basic_type.UInt32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("MaxNodesPerMethodCall", new ModNodeIdNumeric(0, 11709), basic_type.UInt32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("MaxNodesPerWrite", new ModNodeIdNumeric(0, 11707), basic_type.UInt32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("MaxNodesPerRead", new ModNodeIdNumeric(0, 11705), basic_type.UInt32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeVariable("SecondsTillShutdown", new ModNodeIdNumeric(0, 2992), basic_type.UInt32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      node = new ModNodeVariable("State", new ModNodeIdNumeric(0, 2259), basic_type.Int32, access.Write);
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      parent = stack.Pop();
      parent = stack.Pop();
      node = new ModNodeFolder("Types", new ModNodeIdNumeric(0,86));
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeFolder("ReferenceTypes", new ModNodeIdNumeric(0,91));
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeFolder("DataTypes", new ModNodeIdNumeric(0,90));
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      node = new ModNodeObject("OPC Binary", new ModNodeIdNumeric(0,93), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      stack.Push(parent);
      parent = node;
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      parent = stack.Pop();
      node = new ModNodeObject("XML Schema", new ModNodeIdNumeric(0,92), "ObjectType");
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      node = new ModNodeFolder("VariableTypes", new ModNodeIdNumeric(0,89));
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeFolder("ObjectTypes", new ModNodeIdNumeric(0,88));
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeFolder("EventTypes", new ModNodeIdNumeric(0,3048));
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      node = new ModNodeFolder("InterfaceTypes", new ModNodeIdNumeric(0,17708));
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
      parent = stack.Pop();
      node = new ModNodeFolder("Views", new ModNodeIdNumeric(0,87));
      parent.AddSubNode(node);
      stack.Push(parent);
      parent = node;
      parent = stack.Pop();
    }
  }
}
